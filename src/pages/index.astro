---
import Button from "../components/Button.astro";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <title>NFTAccounting</title>
  </head>
  <body>
    <div id="wrapper">
      <div id="tiles"></div>
    </div>
    <div id="hero">
      <main>
        <div id="heroHeader">
          <h1>NFT ACCOUNTING.</h1>
          <div class="signUpBtn signUpBtnHero">
            <Button state="signUp" title="Sign Up" />
            <img class="arrowImg" style="margin-left: 0.5rem;" src="left-arrow.png" />
          </div>
        </div>
        <div id="heroText">
          <p class="instructions">
            Less Losses. <br />
            Bigger Profit. <br />
            Built For Ethereum NFT Traders.
          </p>
          <div id="howToBtn">
            <img class="arrowImg" style="margin-right: 0.5rem;" src="right-arrow.png" />
            <Button state="howTo" title="How Does It Work?" />
          </div>
        </div>
      </main>
    </div>
    <div id="howTo">
      <main>
        <h1>How It Works.</h1>
        <div id="howToText">
          <ol class="instructions">
            <li>Automatically get data on every trade you make.</li>
            <li>Anyalyze and write notes on your trades.</li>
            <li>Profit.</li>
          </ol>
          <div id="howToSignUpBtn">
            <img class="arrowImg" style="margin-right: 0.5rem;" src="right-arrow.png" />
            <Button state="signUp" title="Sign Up" />
          </div>
        </div>
        <h1 id="howToHeader2" style="text-align: right;">Sound Simple?</h1>
        <p class="instructions" style="text-align: right;">
          That’s because it is. <br />
          We’ll have experts on hand to help you manage your extra cash. <br />
          And, if you don’t improve your trading in 1 month we will fully refund you. <br />
        </p>
      </main>
    </div>
    <div id="signUp">
      <main>
        <h1>Join Us.</h1>
        <p class="instructions" style="padding-bottom: 0.5rem;">We’re building! Sign up and follow us to keep up to date on our progress.</p>
        <!-- Begin Mailchimp Signup Form -->
        <div id="mc_embed_signup">
          <form
            action="https://gmail.us21.list-manage.com/subscribe/post?u=a23a879591a0026b392977896&id=2a97454cc2&f_id=00f6c8e1f0"
            method="post"
            id="mc-embedded-subscribe-form"
            name="mc-embedded-subscribe-form"
            class="validate"
            target="_blank"
          >
            <div id="mc_embed_signup_scroll">
              <div class="mc-field-group">
                <input type="email" value="" name="EMAIL" class="formInput" placeholder="Email Address" id="mce-EMAIL" required />
                <span id="mce-EMAIL-HELPERTEXT" class="helper_text"></span>
              </div>
              <div class="mc-field-group">
                <input type="text" value="" name="FNAME" class="formInput" id="mce-FNAME" placeholder="First Name" />
                <span id="mce-FNAME-HELPERTEXT" class="helper_text"></span>
              </div>
              <div id="mce-responses" class="clear foot">
                <div class="response" id="mce-error-response" style="display:none"></div>
                <div class="response" id="mce-success-response" style="display:none"></div>
              </div>
              <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
              <div style="position: absolute; left: -5000px;" aria-hidden="true">
                <input type="text" name="b_a23a879591a0026b392977896_2a97454cc2" tabindex="-1" value="" />
              </div>
              <div class="optionalParent">
                <div class="clear foot">
                  <input
                    type="submit"
                    value="Subscribe"
                    name="subscribe"
                    id="mc-embedded-subscribe"
                    class="formInput"
                    style="background: rgb(49, 100, 255); color: white; margin-bottom: 0.5rem;"
                  />
                </div>
              </div>
            </div>
          </form>
        </div>

        <!--End mc_embed_signup-->
        <p class="instructions" style="padding-bottom: 1rem;">
          Follow us on <a href="https://twitter.com/nftaccountingio" target="_blank" style="text-decoration: none; color:rgb(69,177,255);"
            >Twitter
          </a>and join our <a href="https://discord.gg/fjkwfhUZyX" target="_blank" style="text-decoration: none; color:rgb(98,169,234);">Discord!</a>
        </p>
      </main>
    </div>
  </body>
  <script type="module" is:inline>
    // Variables Start
    import anime from "https://cdn.skypack.dev/animejs";

    const hero = document.getElementById("hero");
    const howTo = document.getElementById("howTo");
    const signUp = document.getElementById("signUp");
    const wrapper = document.getElementById("tiles");
    const tileSize = 100;

    let columns = Math.floor(screen.width / tileSize),
      rows = Math.floor(screen.height / tileSize);

    let toggled = false;

    const btn1 = Array.from(document.getElementsByClassName("btn_howTo"));
    const btn2 = Array.from(document.getElementsByClassName("btn_signUp"));

    // Variables End

    // Event Listeners Start

    btn1.forEach((element) => {
      element.addEventListener("click", () => {
        howTo.scrollIntoView({ behavior: "smooth", block: "center" });
      });
    });

    btn2.forEach((element) => {
      element.addEventListener("click", () => {
        signUp.scrollIntoView({ behavior: "smooth", block: "center" });
      });
    });

    // Event Listeners End
    if (window.innerWidth > 800) {
      // Tile Logic Start

      const createTile = (index) => {
        const tile = document.createElement("div");

        tile.classList.add("tile");

        tile.onclick = (e) => handleOnClick(index);

        return tile;
      };

      const createTiles = (quantity) => {
        Array.from(Array(quantity)).map((tile, index) => {
          wrapper.appendChild(createTile(index));
        });
      };

      createTiles(columns * rows);

      const createGrid = () => {
        wrapper.innerHTML = "";

        columns = Math.floor(screen.width / tileSize);
        rows = Math.floor(screen.height / tileSize);

        wrapper.style.setProperty("--columns", columns);
        wrapper.style.setProperty("--rows", rows);

        createTiles(columns * rows);

        setTimeout(() => {
          anime({
            targets: ".tile",
            opacity: 1,
            duration: 5000,
          });
        }, 100);
      };

      // Tile Logic End

      // Scroll Logic Start
      const signUpPosition = screen.height + screen.height / 2;
      const howToPosition = screen.height / 2;

      const scrollBehaviour = (target, value) => {
        toggled = value;

        anime({
          targets: ".tile",
          opacity: toggled ? 0 : 1,
          delay: anime.stagger(40, {
            grid: [columns, rows],
          }),
        });
      };

      let scrollState = "home";
      function setScrollState(state) {
        if (state == "home" && scrollState != "home") {
          scrollState = "home";
          scrollBehaviour(hero, false);
        } else if (state == "howTo" && scrollState != "howTo") {
          scrollState = "howTo";
          scrollBehaviour(howTo, true);
        } else if (state == "signUp" && scrollState != "signUp") {
          scrollState = "signUp";
          scrollBehaviour(signUp, false);
        }
      }

      let scrolling = false;

      window.onscroll = () => {
        scrolling = true;
      };

      setInterval(() => {
        if (scrolling) {
          scrolling = false;
          if (window.scrollY >= 0 && window.scrollY < howToPosition) {
            setScrollState("home");
          } else if (window.scrollY >= howToPosition && window.scrollY < signUpPosition) {
            setScrollState("howTo");
          } else if (window.scrollY >= signUpPosition) {
            setScrollState("signUp");
          }
        }
      }, 100);

      // Scroll Logic End
      window.onload = () => createGrid();
      window.onresize = () => createGrid();
    }
  </script>

  <style is:global>
    @import url("https://fonts.googleapis.com/css2?family=Yantramanav:wght@500;900&display=swap");

    :root {
      --g1: rgb(104, 34, 34);
      --g2: rgb(24, 25, 87);
      --current1: var(--g1);
      --current2: var(--g2);
    }
    html {
      font-family: "Yantramanav", sans-serif;
      font-size: 32px;
      font-weight: 100;
    }

    p {
      margin: 0;
    }

    @keyframes background-pan {
      from {
        background-position: 0% center;
      }

      to {
        background-position: -200% center;
      }
    }

    @keyframes enter-pan {
      from {
        height: 90vh;
        opacity: 0;
      }

      to {
        height: 100vh;
        opacity: 100;
      }
    }

    @keyframes exit {
      from {
        height: 100vh;
        opacity: 100;
      }

      to {
        height: 90vh;
        opacity: 0;
      }
    }

    #signUp {
      animation: enter-pan 1s ease-out forwards !important;
      display: flex !important;
      height: 100vh;
    }

    #howTo {
      animation: enter-pan 1s ease-out forwards !important;
      display: flex !important;
      height: 100vh;
    }

    #hero {
      animation: enter-pan 1s ease-out forwards !important;
      display: flex !important;
      height: 100vh;
    }

    .toggled {
      animation: exit 1s ease forwards;
    }

    body {
      min-height: 100vh;
      margin: 0;
      animation: background-pan 10s linear infinite;
      background: linear-gradient(to right, var(--current1), var(--current2), var(--current1));
      background-size: 200%;
    }

    code {
      font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
    }

    #wrapper {
      position: fixed;
      z-index: -1;
    }

    .tile {
      position: relative;
      opacity: 0;
    }

    .tile::before {
      background-color: rgb(18, 21, 30);
      content: "";
      position: absolute;
      inset: 0.6px;
    }

    .tile:hover {
      opacity: 0.95;
    }

    #tiles {
      height: 100vh;
      width: 100vw;

      display: grid;
      grid-template-columns: repeat(var(--columns), 1fr);
      grid-template-rows: repeat(var(--rows), 1fr);
    }

    main {
      margin: auto;
      padding: 1.5rem;
      max-width: 150ch;
    }
    h1 {
      font-size: 3.5rem;
      font-weight: 900;
      margin: 0;
      color: white;
    }
    .instructions {
      color: white;
    }
    .instructions code {
      font-size: 0.875em;
      font-weight: bold;
      background: rgba(var(--accent), 12%);
      color: rgb(var(--accent));
      border-radius: 4px;
      padding: 0.3em 0.45em;
    }
    .instructions strong {
      color: rgb(var(--accent));
    }
    .link-card-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
      gap: 1rem;
      padding: 0;
    }

    #heroHeader {
      position: relative;
    }

    .signUpBtn {
      position: absolute;
      right: 1.5em;
      top: 5rem;
      z-index: 2;
    }

    #howToBtn {
      position: absolute;
      left: 1em;
      top: 4.5rem;
    }

    #heroText {
      position: relative;
      padding-bottom: 4.5rem;
    }

    ol {
      margin: 0;
    }

    #howToSignUpBtn {
      position: absolute;
      left: 1em;
      top: 4.5rem;
    }

    form {
      display: flex;
      flex-direction: column;
    }

    #howToText {
      position: relative;
      padding-bottom: 3.5rem;
    }

    .formInput {
      padding: 0.5rem;
      border: 1px solid rgb(49, 100, 255);
      border-radius: 4px;
      font-size: 0.5rem;
      font-weight: 900;
      width: 100%;
    }

    .mc-field-group {
      display: flex;
    }

    @media only screen and (max-width: 800px) {
      html {
        font-size: 12px;
      }

      h1{
        font-size: 3.25rem;
      }

      #howTo h1{
        color: black;
      }

      #howTo .instructions{
        color: black;
      }

      .instructions{
        font-size: 1.6em;
      }   

      .arrowImg{
        width: 1.5em;
      }

      .signUpBtn button{
        top: 4rem;
        font-size: 0.75rem;
      }

      #howToBtn{
        top: 8rem;
      }

      #howToSignUpBtn{
        top: 12rem;
      }
      
      #howToHeader2{
        margin-top: 5rem;
      }

      #howTo{
        height: 100%;
        animation: none !important;
        padding-top: 5rem;
        padding-bottom: 5rem;
        background: white;
        background-image: url("/gridWhite.png");
        background-repeat: repeat;
      }

      #hero{
        height: 100%;
        animation: none !important;
        padding-top: 5rem;
        padding-bottom: 5rem;
        background: black;
        background-image: url("/gridBlack.png");
        background-repeat: repeat;
      }

      #signUp{
        height: 100%;
        animation: none !important;
        padding-top: 5rem;
        padding-bottom: 5rem;
        background: black;
        background-image: url("/gridBlack.png");
        background-repeat: repeat;
      }

      body{
        background: black;
        animation: none !important;
      }
    }

    @media only screen and (max-width: 1250px) and (min-width: 800px) {
      html {
        font-size: 24px;
      }
    }
  </style>
</html>
